{
  "version": 3,
  "sources": ["../../routes/user.ts"],
  "sourcesContent": ["import Router, {RouterContext} from \"koa-router\";\nimport bodyParser from \"koa-bodyparser\";\nimport * as model from '../models/user';\n\n\nconst router = new Router({prefix: '/api/v1/user'});\n\nconst getAlluser = async (ctx: RouterContext, next: any)=> {\n let user = await model.getAlluser();\n if (user.length) {\n ctx.body = user;\n } else {\n ctx.body = {}\n }\n await next();\n}\n\nconst getByUserId = async (ctx: RouterContext, next: any) => {\n  let id = ctx.params.id;\n  let user = await model.getByUserId(id);\n  if (user.length) {\n    ctx.body = user[0];\n  } else {\n    ctx.status = 404;\n  }\n  await next();\n}\n\nconst register = async (ctx: RouterContext, next: any) => {\n  const body = ctx.request.body;\n  let result = await model.register(body);\n  if (result.status == 201) {\n    ctx.status = 201;\n    ctx.body = body;\n  } else {\n    ctx.status = 500;\n    ctx.body = {err: \"insert data failed\"};\n  }\n  await next();\n}\n\nconst updateUser = async (ctx: RouterContext, next: any) => {\n    let id = ctx.params.id;\n    let context: any = ctx.request.body;\n    let update_user = await model.updateByUserId(context,id);\n    let user = await model.getByUserId(id);\n    ctx.body = user;\n    ctx.status = 200;  \n    if (user.length){\n        ctx.body = user;\n    } else {\n        ctx.body = {}\n    }\n    await next();\n}\n\nconst deleteUser = async (ctx: RouterContext, next: any) => {\n    let id = ctx.params.id;\n    await model.deleteByUserId(id);\n    let user = await model.getByUserId(id);\n    ctx.body = user;\n    ctx.status = 200;  \n    if (user.length){\n    } else {\n        ctx.body = `id:${id} deleted success`\n    }\n    await next();\n}\n\nrouter.get('/', getAlluser);\nrouter.get('/:id([0-9]{1,})', getByUserId);\nrouter.post('/', bodyParser(), register);\nrouter.put('/:id([0-9]{1,})',bodyParser(),updateUser);\nrouter.del('/:id([0-9]{1,})', deleteUser);\n\n\nexport { router };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAoC;AACpC,4BAAuB;AACvB,YAAuB;AAGvB,MAAM,SAAS,IAAI,kBAAAA,QAAO,EAAC,QAAQ,eAAc,CAAC;AAElD,MAAM,aAAa,OAAO,KAAoB,SAAa;AAC1D,MAAI,OAAO,MAAM,MAAM,WAAW;AAClC,MAAI,KAAK,QAAQ;AACjB,QAAI,OAAO;AAAA,EACX,OAAO;AACP,QAAI,OAAO,CAAC;AAAA,EACZ;AACA,QAAM,KAAK;AACZ;AAEA,MAAM,cAAc,OAAO,KAAoB,SAAc;AAC3D,MAAI,KAAK,IAAI,OAAO;AACpB,MAAI,OAAO,MAAM,MAAM,YAAY,EAAE;AACrC,MAAI,KAAK,QAAQ;AACf,QAAI,OAAO,KAAK;AAAA,EAClB,OAAO;AACL,QAAI,SAAS;AAAA,EACf;AACA,QAAM,KAAK;AACb;AAEA,MAAM,WAAW,OAAO,KAAoB,SAAc;AACxD,QAAM,OAAO,IAAI,QAAQ;AACzB,MAAI,SAAS,MAAM,MAAM,SAAS,IAAI;AACtC,MAAI,OAAO,UAAU,KAAK;AACxB,QAAI,SAAS;AACb,QAAI,OAAO;AAAA,EACb,OAAO;AACL,QAAI,SAAS;AACb,QAAI,OAAO,EAAC,KAAK,qBAAoB;AAAA,EACvC;AACA,QAAM,KAAK;AACb;AAEA,MAAM,aAAa,OAAO,KAAoB,SAAc;AACxD,MAAI,KAAK,IAAI,OAAO;AACpB,MAAI,UAAe,IAAI,QAAQ;AAC/B,MAAI,cAAc,MAAM,MAAM,eAAe,SAAQ,EAAE;AACvD,MAAI,OAAO,MAAM,MAAM,YAAY,EAAE;AACrC,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,KAAK,QAAO;AACZ,QAAI,OAAO;AAAA,EACf,OAAO;AACH,QAAI,OAAO,CAAC;AAAA,EAChB;AACA,QAAM,KAAK;AACf;AAEA,MAAM,aAAa,OAAO,KAAoB,SAAc;AACxD,MAAI,KAAK,IAAI,OAAO;AACpB,QAAM,MAAM,eAAe,EAAE;AAC7B,MAAI,OAAO,MAAM,MAAM,YAAY,EAAE;AACrC,MAAI,OAAO;AACX,MAAI,SAAS;AACb,MAAI,KAAK,QAAO;AAAA,EAChB,OAAO;AACH,QAAI,OAAO,MAAM;AAAA,EACrB;AACA,QAAM,KAAK;AACf;AAEA,OAAO,IAAI,KAAK,UAAU;AAC1B,OAAO,IAAI,mBAAmB,WAAW;AACzC,OAAO,KAAK,SAAK,sBAAAC,SAAW,GAAG,QAAQ;AACvC,OAAO,IAAI,uBAAkB,sBAAAA,SAAW,GAAE,UAAU;AACpD,OAAO,IAAI,mBAAmB,UAAU;",
  "names": ["Router", "bodyParser"]
}
